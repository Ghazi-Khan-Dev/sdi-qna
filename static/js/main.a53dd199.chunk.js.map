{"version":3,"sources":["components/question-answer/QuestionAnswerContainer.js","components/dashboard/Home.js","utils/helper.js","App.js","reportWebVitals.js","index.js"],"names":["QuestionAnswerContainer","Home","quetionAnswer","setQuetionAnswer","useState","questionAnswerGroupByCategory","setQuestionAnswerGroupByCategory","useEffect","parsedQuetionAnswer","getParsedQuetionAnswer","questionAnswerItems","JSON","parse","stringify","questionAnswerData","Array","isArray","forEach","item","id","questionAnsweritemGroupByCategory","quetionAnswerGroupByCategory","Object","keys","key","category","description","questionAnswers","push","console","log","getQuetionAnswerGroupByCategory","React","createElement","Fragment","App","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","BrowserRouter"],"mappings":"oUA2BeA,I,QCIAC,MApBFA,KAEX,MAAOC,EAAeC,GAAoBC,mBAAS,KAC5CC,EAA+BC,GAAoCF,mBAAS,IAUnF,OAPAG,oBAAU,KACR,MAAMC,EChB4BC,MACpC,MAAMC,EAAsBC,KAAKC,MAAMD,KAAKE,UAAUC,IAChDN,EAAsB,GAS5B,OARIO,MAAMC,QAAQN,IAChBA,EAAoBO,QAASC,IAC3B,MAAM,GAAEC,GAAOD,EACfV,EAAoBW,GAAM,IACrBD,KAIFV,GDKuBC,GACtBW,ECHsCZ,KAC9C,MAAMa,EAA+B,GAiBrC,OAfIb,GACFc,OAAOC,KAAKf,GAAqBS,QAASO,IACxC,MAAMN,EAAOV,EAAoBgB,IAC3B,SAAEC,GAAaP,EACjBG,EAA6BI,KAC/BJ,EAA6BI,GAAY,CACvCA,SAAUP,EAAKO,SACfC,YAAaR,EAAKQ,YAClBC,gBAAiB,KAGrBN,EAA6BI,GAAUE,gBAAgBC,KAAKV,KAGhEW,QAAQC,IAAI,yBAA0BT,GAC/BA,GDfqCU,CAAgCvB,GAC1EL,EAAiBK,GACjBF,EAAiCc,IAEhC,IAEDY,IAAAC,cAAAD,IAAAE,SAAA,KAAE,Y,OEZSC,MARf,WACE,OACEH,IAAAC,cAACG,IAAM,KACLJ,IAAAC,cAACI,IAAK,CAACC,KAAK,IAAIC,QAASP,IAAAC,cAAChC,EAAI,UCIrBuC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,KAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,M,QCADS,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHtB,IAAAC,cAACD,IAAMuB,WAAU,KACfvB,IAAAC,cAACuB,IAAa,KACZxB,IAAAC,cAACE,EAAG,SAQVK,K","file":"static/js/main.a53dd199.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./question-answer-container.css\";\r\nimport Categories from \"./Categories\";\r\n\r\nconst NoQuestionAnswerAvailable = () => {\r\n  return (\r\n    <div className=\"no-data-to-show\">\r\n      <span>Pls modify the seach keywords</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst QuestionAnswerContainer = (props) => {\r\n  const { questionAnswerItems } = props;\r\n  return (\r\n    <>\r\n      <div className=\"question-answer-container\">\r\n        {Object.keys(questionAnswerItems).length === 0 ? (\r\n          <NoQuestionAnswerAvailable />\r\n        ) : (\r\n          <Categories questionAnswerItems={questionAnswerItems}/>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default QuestionAnswerContainer;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport ClearIcon from '@mui/icons-material/Clear';\r\n\r\nimport \"./home.css\";\r\nimport Header from \"./Header\";\r\nimport QuestionAnswerContainer from \"../question-answer/QuestionAnswerContainer\";\r\nimport { getParsedQuetionAnswer, getQuetionAnswerGroupByCategory } from \"../../utils/helper\";\r\n\r\nconst palceholderForSearch =`type the questions`;\r\n\r\nconst Home = () => {\r\n\r\n  const [quetionAnswer, setQuetionAnswer] = useState({});\r\n  const [questionAnswerGroupByCategory, setQuestionAnswerGroupByCategory] = useState({});\r\n\r\n\r\n  useEffect(() => {\r\n    const parsedQuetionAnswer = getParsedQuetionAnswer();\r\n    const questionAnsweritemGroupByCategory = getQuetionAnswerGroupByCategory(parsedQuetionAnswer);\r\n    setQuetionAnswer(parsedQuetionAnswer);\r\n    setQuestionAnswerGroupByCategory(questionAnsweritemGroupByCategory);\r\n\r\n  }, [])\r\n  return (\r\n    <>\r\n    testing\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import questionAnswerData from \"../assets/questions-answer.json\";\r\n\r\nexport const getParsedQuetionAnswer = () => {\r\n  const questionAnswerItems = JSON.parse(JSON.stringify(questionAnswerData));\r\n  const parsedQuetionAnswer = {};\r\n  if (Array.isArray(questionAnswerItems)) {\r\n    questionAnswerItems.forEach((item) => {\r\n      const { id } = item;\r\n      parsedQuetionAnswer[id] = {\r\n        ...item,\r\n      };\r\n    });\r\n  }\r\n  return parsedQuetionAnswer;\r\n};\r\n\r\nexport const getQuetionAnswerGroupByCategory = (parsedQuetionAnswer) => {\r\n  const quetionAnswerGroupByCategory = {};\r\n\r\n  if (parsedQuetionAnswer) {\r\n    Object.keys(parsedQuetionAnswer).forEach((key) => {\r\n      const item = parsedQuetionAnswer[key];\r\n      const { category } = item;\r\n      if(!quetionAnswerGroupByCategory[category]) {\r\n        quetionAnswerGroupByCategory[category] = {\r\n          category: item.category,\r\n          description: item.description,\r\n          questionAnswers: []\r\n        }\r\n      }\r\n      quetionAnswerGroupByCategory[category].questionAnswers.push(item);\r\n    });\r\n  }\r\n  console.log('parsedQuetionAnswer - ', quetionAnswerGroupByCategory);\r\n  return quetionAnswerGroupByCategory;\r\n};\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Home from \"./components/dashboard/Home\";\nimport { Route, Routes } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Routes>\n      <Route path=\"/\" element={<Home />} />\n    </Routes>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}